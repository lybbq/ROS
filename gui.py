# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtWidgets
from PyQt5 import QtGui
from PyQt5 import QtCore
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import Qt
import threading

import sys
def Synced(func):
    def SyncedFunc(self, *args, **kwargs):
        with self.Canvas.RLock():
            return func(self, *args, **kwargs)
    return SyncedFunc



class BaseWidgets(QWidget):
    __TYPE__ = "WIDGET"
    def __init__(self,parent,image_filename=None):
        super(BaseWidgets, self).__init__(parent)

        self.Canvas = Canvas
        self.image_filename = image_filename
        self.parent = parent

        self.pix = QPixmap(self.image_filename)
        self.setGeometry(QRect(0, 0, self.pix.width(), self.pix.height()))

        self.setAttribute(Qt.WA_TransparentForMouseEvents, True)

        self.x_ = 0
        self.y_ = 0
        print(self.rect())

    def paintEvent(self, a0: QtGui.QPaintEvent) -> None:
        print("子类重画")
        painter = QPainter(self)

        #pix.fill(Qt.red)*
        new_w = int(self.pix.width()*0.5)
        new_h = int(self.pix.height() * 0.5)

        pix = self.pix.scaled(new_w, new_h, Qt.KeepAspectRatio)
        painter.drawPixmap(self.x_, self.y_, pix)
    # @Synced

    def draw(self,pos):
        # self.setGeometry(QRect(400, 400, self.pix.width(), self.pix.height()))
        self.move(self.mapToParent(pos))





class Canvas(QGraphicsView): # QGraphicsView
    def __init__(self,parent=None):
        super(Canvas,self).__init__(parent)
        print(parent.size().width(),parent.size().height())
        # self.setupUi(parent)
        self.Clicked = None
        self.Widgets = []
        self.RLock = threading.RLock()
        self.SelectionRect = QRect(QPoint(0,0),QSize(0,0))
        # self.SelectionRect.in
        self.SelectedWidget = []
        self.Hovered = None
        self.setupUi(parent)


        # parent
        self.setMouseTracking(True)
        print("Canvas:", self.rect())

    def setupUi(self, parent=None):

        self.setGeometry(QRect(parent.size().width()//2-250,parent.size().height()//2-200, 500, 400))

        self.setObjectName("graphicsView")

        self.cnt = 0

    def AddWidgets(self,BaseWidgets):
        Widget = BaseWidgets(self,"D:\毕业\工作\pythonProject\LabPype-master\demo\icon\DialogExample.png")
        if Widget not in self.Widgets:
            self.Widgets.append(Widget)

    def SelectNone(self):
        self.SelectedWidget = []

    def mousePressEvent(self, event: QtGui.QMouseEvent) -> None:
        self.Clicked = self.Hovered
        #print("点击",self.Clicked )
        if event.buttons() == Qt.LeftButton:
            self.mouseLeftButton(self.Clicked)

    def mouseLeftButton(self,Clicked):
        if Clicked:
            if Clicked.__TYPE__ == "WIDGET":
                if Clicked not in self.SelectedWidget:
                    print("单击点击选中：", Clicked)
                    self.SelectNone()
                    self.OnSelect(Clicked)
                else:
                    print("选中多个")


    def UpdateSelection(self):
        for w in self.Widgets:
            self.OnSelect(w, self.SelectionRect.Intersects(w.rect))

    def OnSelect(self, w, selected=True):
        if selected and w not in self.SelectedWidget:
            self.SelectedWidget.append(w)
        elif not selected and w in self.SelectedWidget:
            self.SelectedWidget.remove(w)

    def mouseMoveEvent(self, a0: QtGui.QMouseEvent) -> None:

        try:
            self.Hovered = self.GetHovered(a0.pos())
            for w in self.SelectedWidget:
                    pos = a0.pos()-w.pos()
                    w.draw(pos)

        except Exception as e:
            print("问题移动",e)
        pass

    def mouseReleaseEvent(self, event: QtGui.QMouseEvent) -> None:
        print("释放")

        self.Clicked = None
        self.SelectedWidget = []


    def GetHovered(self,pose):
        Hovered = None
        for w in self.Widgets:
            if pose in w.rect():
                Hovered = w
                break
        print("移动：",Hovered)
        return Hovered

class MainWindow(QMainWindow):
    def __init__(self,parent=None):
        super(MainWindow,self).__init__(parent)
        # MainWindow.setCentralWidget(self)
        self.setObjectName("MainWindow")
        self.resize(800, 600)

        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFile.menuAction())
        self.retranslateUi()

        self.Canvas = Canvas(self)
        self.Canvas.AddWidgets(BaseWidgets)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    a = MainWindow()
    # main.show()
    a.show()
    sys.exit(app.exec_())
